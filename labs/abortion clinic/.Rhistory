dname = "D",
gname = "G",
data = df,
target_parameter = "level",
aggregation = "dose",
treatment_type = "continuous",
control_group = "notyettreated"
)
library(ggplot2)
library(gridExtra)
library(dplyr)
# Data
cohorts <- c("2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007")
effects <- c(3.393, 0.014, 0.303, 1.163, 1.401, -0.185, -0.721, 0.505)
counties <- c(9, 5, 12, 36, 58, 69, 341, 65)
colors <- ifelse(effects > 0, "#2E8B57", "#DC143C")  # Green for positive, red for negative
df <- data.frame(cohorts, effects, counties, colors)
# Chart 1: Raw Effects (equal width bars)
p1 <- ggplot(df, aes(x = cohorts, y = effects)) +
geom_col(fill = colors, width = 0.7) +
geom_hline(yintercept = 0, color = "black", size = 0.5) +
labs(title = "Raw Effects - Mostly Positive!",
y = "Effect on Birth Rates",
x = "") +
theme_minimal() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12)) +
ylim(-1, 4)
# Chart 2: Weighted by county size
# Create width proportional to counties
df$width <- counties / max(counties) * 0.8  # Scale to reasonable width
p2 <- ggplot(df, aes(x = as.numeric(factor(cohorts)), y = effects)) +
geom_col(aes(width = width), fill = colors) +
geom_hline(yintercept = 0, color = "black", size = 0.5) +
labs(title = "But Size Matters - 2006 Dominates!",
y = "Effect on Birth Rates",
x = "Cohort") +
scale_x_continuous(breaks = 1:8, labels = cohorts) +
theme_minimal() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12)) +
ylim(-1, 4) +
# Add county counts as text
geom_text(aes(label = paste0(counties, " counties")),
vjust = ifelse(effects > 0, -0.3, 1.3), size = 3)
# Combine plots
combined <- grid.arrange(p1, p2, nrow = 2,
bottom = textGrob("Unweighted avg: +0.203     Weighted avg: -0.112",
gp = gpar(fontsize = 14, fontface = "bold")))
# name: equivalence2.R
# author: scott cunningham
# description: OLS and Manual are the same
# Load required libraries
library(haven)
library(dplyr)
library(fixest)
library(tidyr)
# Clear workspace and load data
rm(list = ls())
# Load the castle dataset
castle <- read_dta("https://github.com/scunning1975/mixtape/raw/master/castle.dta")
# Set up panel structure (equivalent to xtset)
castle <- castle %>%
arrange(sid, year)
# Drop specific years and create variables
castle <- castle %>%
filter(!(effyear %in% c(2005, 2007, 2008, 2009))) %>%
select(-post) %>%
mutate(
post = ifelse(year >= 2006, 1, 0),
treat = ifelse(effyear == 2006, 1, 0)
) %>%
filter(year %in% c(2005, 2006))
# Example 1: OLS regression with interactions
cat("Example 1: OLS regression with interactions\n")
model1 <- feols(l_homicide ~ post * treat,
data = castle,
cluster = ~sid)
summary(model1)
# Example 2: Twoway fixed effects (state and year fixed effects)
cat("\nExample 2: Twoway fixed effects (state and year fixed effects)\n")
model2 <- feols(l_homicide ~ treat:post + factor(year) | sid,
data = castle,
cluster = ~sid)
summary(model2)
# Example 3: Regress "long difference" onto treatment dummy
cat("\nExample 3: Regress 'long difference' onto treatment dummy\n")
# Create the difference data
diff_data <- castle %>%
select(sid, year, l_homicide, prison, treat) %>%
pivot_wider(
names_from = year,
values_from = c(l_homicide, prison),
names_sep = "_"
) %>%
mutate(
diff = l_homicide_2006 - l_homicide_2005
)
# name: equivalence2.R
# author: scott cunningham
# description: OLS and Manual are the same
# Load required libraries
library(haven)
library(dplyr)
library(fixest)
library(tidyr)
# Clear workspace and load data
rm(list = ls())
# Load the castle dataset
castle <- read_dta("https://github.com/scunning1975/mixtape/raw/master/castle.dta")
# Set up panel structure (equivalent to xtset)
castle <- castle %>%
arrange(sid, year)
# Drop specific years and create variables
castle <- castle %>%
filter(!(effyear %in% c(2005, 2007, 2008, 2009))) %>%
select(-post) %>%
mutate(
post = ifelse(year >= 2006, 1, 0),
treat = ifelse(effyear == 2006, 1, 0)
) %>%
filter(year %in% c(2005, 2006))
# Example 1: OLS regression with interactions
cat("Example 1: OLS regression with interactions\n")
model1 <- feols(l_homicide ~ post * treat,
data = castle,
cluster = ~sid)
summary(model1)
# Example 2: Twoway fixed effects (state and year fixed effects)
cat("\nExample 2: Twoway fixed effects (state and year fixed effects)\n")
model2 <- feols(l_homicide ~ treat:post + factor(year) | sid,
data = castle,
cluster = ~sid)
summary(model2)
# Example 3: Regress "long difference" onto treatment dummy
cat("\nExample 3: Regress 'long difference' onto treatment dummy\n")
# Example 3: Regress "long difference" onto treatment dummy
cat("\nExample 3: Regress 'long difference' onto treatment dummy\n")
# Create the difference data (removing prison variable that doesn't exist)
diff_data <- castle %>%
select(sid, year, l_homicide, treat) %>%
pivot_wider(
names_from = year,
values_from = l_homicide,
names_prefix = "l_homicide_"
) %>%
mutate(
diff = l_homicide_2006 - l_homicide_2005
)
model3 <- feols(diff ~ treat,
data = diff_data,
cluster = ~sid)
summary(model3)
# Display all results for comparison
cat("\n=== COMPARISON OF RESULTS ===\n")
cat("Model 1 - OLS with interaction coefficient:\n")
print(coef(model1)["post:treat"])
cat("\nModel 2 - Fixed effects coefficient:\n")
print(coef(model2)["treat:post"])
cat("\nModel 3 - Long difference coefficient:\n")
print(coef(model3)["treat"])
cat("\nAll three methods should give the same coefficient estimate.\n")
# Load necessary libraries
library(tidyverse)
library(haven)
# devtools::install_github("ebenmichael/augsynth")
# devtools::install_github("bcastanho/SCtools")
library(augsynth)
# Load necessary libraries
library(tidyverse)
library(haven)
devtools::install_github("ebenmichael/augsynth")
# Load necessary libraries
# devtools::install_github("ebenmichael/augsynth")
# devtools::install_github("bcastanho/SCtools")
library(tidyverse)
library(haven)
library(augsynth)
library(SCtools)
library(ggplot2)
library(dplyr)
# Load the smoking data
smoking <- haven::read_dta("https://raw.github.com/scunning1975/mixtape/master/synth_smoking.dta")
# Convert state to character and set treated as numeric
smoking <- smoking %>%
mutate(
state = as.character(state),
treated = as.numeric(state == "3" & year >= 1989)  #
)
# Check for any issues in treated assignment
table(smoking$treated, smoking$state == "3")
# Run the augmented synthetic control
syn_tx <- augsynth(
cigsale ~ treated,
unit = state, time = year, data = smoking,
progfunc = "ridge", scm = TRUE
)
# When using outcome model: in augsyth(), when set progfunc = 'ridge' (or other functions), we can plot cross-validation MSE by setting cv = T
list(syn_tx$weights)
summary(syn_tx)
# Assume syn$weights contains the synthetic control weights for each state
weights <- as.data.frame(syn_tx$weights)
colnames(weights) <- "weight"
weights$state <- rownames(weights)
# Convert state to a factor, ordered by weight magnitude
weights <- weights %>%
mutate(state = fct_reorder(state, abs(weight), .desc = TRUE))
# Plot the weights distribution
ggplot(weights, aes(x = weight, y = state)) +
geom_point(aes(color = weight > 0), size = 3) +  # Color for positive/negative weights
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +  # Vertical line at zero
scale_color_manual(values = c("blue", "red"), labels = c("Negative", "Positive")) +
labs(
title = "Distribution of (Smoking) Synthetic Control Weights by State",
x = "Weight",
y = "State (ordered by absolute weight)"
) +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(title = "Weight Sign"))
# Load necessary libraries
# devtools::install_github("ebenmichael/augsynth")
# devtools::install_github("bcastanho/SCtools")
library(tidyverse)
library(haven)
library(augsynth)
library(SCtools)
library(ggplot2)
library(dplyr)
# Load the smoking data
smoking <- haven::read_dta("https://raw.github.com/scunning1975/mixtape/master/synth_smoking.dta")
# Convert state to character and set treated as numeric
smoking <- smoking %>%
mutate(
state = as.character(state),
treated = as.numeric(state == "3" & year >= 1989)  #
)
# Check for any issues in treated assignment
table(smoking$treated, smoking$state == "3")
# Run the augmented synthetic control
syn_tx <- augsynth(
cigsale ~ treated,
unit = state, time = year, data = smoking,
progfunc = "ridge", scm = TRUE
)
# When using outcome model: in augsyth(), when set progfunc = 'ridge' (or other functions), we can plot cross-validation MSE by setting cv = T
list(syn_tx$weights)
summary(syn_tx)
# Generate the plot with jackknife confidence intervals
plot(syn_tx, inf_type = "jackknife+")
# Assume syn$weights contains the synthetic control weights for each state
weights <- as.data.frame(syn_tx$weights)
colnames(weights) <- "weight"
weights$state <- rownames(weights)
# Convert state to a factor, ordered by weight magnitude
weights <- weights %>%
mutate(state = fct_reorder(state, abs(weight), .desc = TRUE))
# Plot the weights distribution
ggplot(weights, aes(x = weight, y = state)) +
geom_point(aes(shape = weight > 0, fill = weight > 0), size = 3, stroke = 1.5) +  # Different shapes and fills
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40", size = 1) +  # Vertical line at zero
scale_shape_manual(values = c(21, 19), labels = c("Negative", "Positive")) +  # Hollow circle vs solid circle
scale_fill_manual(values = c("white", "gray30"), labels = c("Negative", "Positive")) +  # White fill vs gray fill
labs(
title = "Distribution of (Smoking) Synthetic Control Weights by State",
x = "Weight",
y = "State (ordered by absolute weight)"
) +
theme_minimal() +
theme(
legend.position = "bottom",
panel.grid.major = element_line(color = "gray90", size = 0.5),
panel.grid.minor = element_line(color = "gray95", size = 0.25)
) +
guides(
shape = guide_legend(title = "Weight Sign", override.aes = list(size = 4)),
fill = guide_legend(title = "Weight Sign", override.aes = list(size = 4))
)
source("~/Library/CloudStorage/Dropbox-MixtapeConsulting/scott cunningham/0. Yale_Mixtape/Master_do_files/texas_augsynth.R")
weights <- as.numeric(syn_tx$weights)
# Extract actual treated outcomes
treated_outcomes <- as.data.frame(syn_tx$data$synth_data$Y1plot)
treated_years <- syn_tx$data$time
# Calculate the synthetic control outcome by applying the weights to donor outcomes
donor_outcomes <- as.matrix(syn_tx$data$synth_data$Y0plot)
synthetic_outcomes <- donor_outcomes %*% weights
# Combine treated and synthetic outcomes into one data frame for plotting
plot_data <- data.frame(
Year = treated_years,
Treated = unlist(treated_outcomes),
Synthetic = synthetic_outcomes
)
ggplot(plot_data, aes(x = Year)) +
geom_line(aes(y = Treated, color = "Treated Outcome")) +
geom_line(aes(y = Synthetic, color = "Synthetic Control")) +
labs(
title = "Estimated Effect of Prop 99 on Smoking",
subtitle = "Augmented Synthetic Control",
y = "Black Male Inmates",
color = "Group"
) +
geom_vline(xintercept = 1993, linetype = "dashed", color = "gray") +  # Add dashed vertical line
theme_minimal()
# Texas - perfect fit
texas <- haven::read_dta("https://raw.github.com/scunning1975/mixtape/master/texas.dta")
# create a treated variable
texas$treated = as.numeric(texas$state == 'Texas' & texas$year >= 1993)
# Augmented Synthetic Controls
syn_tx <- augsynth(
bmprison ~ treated,
unit = statefip, time = year, data = texas,
progfunc = "ridge", scm = T
)
# When using outcome model: in augsyth(), when set progfunc = 'ridge' (or other functions), we can plot cross-validation MSE by setting cv = T
list(syn_tx$weights)
summary(syn_tx)
# Generate the plot with jackknife confidence intervals
plot(syn_tx, inf_type = "jackknife+")
# Assume syn$weights contains the synthetic control weights for each state
weights <- as.data.frame(syn_tx$weights)
colnames(weights) <- "weight"
weights$state <- rownames(weights)
# Convert state to a factor, ordered by weight magnitude
weights <- weights %>%
mutate(state = fct_reorder(state, abs(weight), .desc = TRUE))
# Plot the weights distribution
ggplot(weights, aes(x = weight, y = state)) +
geom_point(aes(color = weight > 0), size = 3) +  # Color for positive/negative weights
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +  # Vertical line at zero
scale_color_manual(values = c("blue", "red"), labels = c("Negative", "Positive")) +
labs(
title = "Distribution of (Prison) Synthetic Control Weights by State",
x = "Weight",
y = "State (ordered by absolute weight)"
) +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(title = "Weight Sign"))
ggplot(weights, aes(x = weight, y = state)) +
geom_point(aes(shape = weight > 0, fill = weight > 0), size = 3, stroke = 1.5) +  # Different shapes and fills
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40", size = 1) +  # Vertical line at zero
scale_shape_manual(values = c(21, 19), labels = c("Negative", "Positive")) +  # Hollow circle vs solid circle
scale_fill_manual(values = c("white", "gray30"), labels = c("Negative", "Positive")) +  # White fill vs gray fill
labs(
title = "Distribution of (Prison) Synthetic Control Weights by State",
x = "Weight",
y = "State (ordered by absolute weight)"
) +
theme_minimal() +
theme(
legend.position = "bottom",
panel.grid.major = element_line(color = "gray90", size = 0.5),
panel.grid.minor = element_line(color = "gray95", size = 0.25)
) +
guides(
shape = guide_legend(title = "Weight Sign", override.aes = list(size = 4)),
fill = guide_legend(title = "Weight Sign", override.aes = list(size = 4))
)
# Load necessary libraries
# devtools::install_github("ebenmichael/augsynth")
# devtools::install_github("bcastanho/SCtools")
library(tidyverse)
library(haven)
library(augsynth)
library(SCtools)
library(ggplot2)
library(dplyr)
# Load the smoking data
smoking <- haven::read_dta("https://raw.github.com/scunning1975/mixtape/master/synth_smoking.dta")
# Convert state to character and set treated as numeric
smoking <- smoking %>%
mutate(
state = as.character(state),
treated = as.numeric(state == "3" & year >= 1989)  #
)
# Check for any issues in treated assignment
table(smoking$treated, smoking$state == "3")
# Run the augmented synthetic control
syn_tx <- augsynth(
cigsale ~ treated,
unit = state, time = year, data = smoking,
progfunc = "ridge", scm = TRUE
)
# When using outcome model: in augsyth(), when set progfunc = 'ridge' (or other functions), we can plot cross-validation MSE by setting cv = T
list(syn_tx$weights)
summary(syn_tx)
# Generate the plot with jackknife confidence intervals
plot(syn_tx, inf_type = "jackknife+")
# Assume syn$weights contains the synthetic control weights for each state
weights <- as.data.frame(syn_tx$weights)
colnames(weights) <- "weight"
weights$state <- rownames(weights)
# Convert state to a factor, ordered by weight magnitude
weights <- weights %>%
mutate(state = fct_reorder(state, abs(weight), .desc = TRUE))
# Plot the weights distribution
ggplot(weights, aes(x = weight, y = state)) +
geom_point(aes(shape = weight > 0, fill = weight > 0), size = 3, stroke = 1.5) +  # Different shapes and fills
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40", size = 1) +  # Vertical line at zero
scale_shape_manual(values = c(21, 19), labels = c("Negative", "Positive")) +  # Hollow circle vs solid circle
scale_fill_manual(values = c("white", "gray30"), labels = c("Negative", "Positive")) +  # White fill vs gray fill
labs(
title = "Distribution of (Smoking) Synthetic Control Weights by State",
x = "Weight",
y = "State (ordered by absolute weight)"
) +
theme_minimal() +
theme(
legend.position = "bottom",
panel.grid.major = element_line(color = "gray90", size = 0.5),
panel.grid.minor = element_line(color = "gray95", size = 0.25)
) +
guides(
shape = guide_legend(title = "Weight Sign", override.aes = list(size = 4)),
fill = guide_legend(title = "Weight Sign", override.aes = list(size = 4))
)
# Extract weights (synthetic control weights for each donor unit)
weights <- as.numeric(syn_tx$weights)
# Extract actual treated outcomes
treated_outcomes <- as.data.frame(syn_tx$data$synth_data$Y1plot)
treated_years <- syn_tx$data$time
# Calculate the synthetic control outcome by applying the weights to donor outcomes
donor_outcomes <- as.matrix(syn_tx$data$synth_data$Y0plot)
synthetic_outcomes <- donor_outcomes %*% weights
# Combine treated and synthetic outcomes into one data frame for plotting
plot_data <- data.frame(
Year = treated_years,
Treated = unlist(treated_outcomes),
Synthetic = synthetic_outcomes
)
ggplot(plot_data, aes(x = Year)) +
geom_line(aes(y = Treated, color = "Treated Outcome")) +
geom_line(aes(y = Synthetic, color = "Synthetic Control")) +
labs(
title = "Estimated Effect of Prop 99 on Smoking",
subtitle = "Augmented Synthetic Control",
y = "Black Male Inmates",
color = "Group"
) +
geom_vline(xintercept = 1993, linetype = "dashed", color = "gray") +  # Add dashed vertical line
theme_minimal()
# Texas - perfect fit
texas <- haven::read_dta("https://raw.github.com/scunning1975/mixtape/master/texas.dta")
# create a treated variable
texas$treated = as.numeric(texas$state == 'Texas' & texas$year >= 1993)
# Augmented Synthetic Controls
syn_tx <- augsynth(
bmprison ~ treated,
unit = statefip, time = year, data = texas,
progfunc = "ridge", scm = T
)
# When using outcome model: in augsyth(), when set progfunc = 'ridge' (or other functions), we can plot cross-validation MSE by setting cv = T
list(syn_tx$weights)
summary(syn_tx)
# Generate the plot with jackknife confidence intervals
plot(syn_tx, inf_type = "jackknife+")
# Assume syn$weights contains the synthetic control weights for each state
weights <- as.data.frame(syn_tx$weights)
colnames(weights) <- "weight"
weights$state <- rownames(weights)
# Convert state to a factor, ordered by weight magnitude
weights <- weights %>%
mutate(state = fct_reorder(state, abs(weight), .desc = TRUE))
# Plot the weights distribution
ggplot(weights, aes(x = weight, y = state)) +
geom_point(aes(shape = weight > 0, fill = weight > 0), size = 3, stroke = 1.5) +  # Different shapes and fills
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40", size = 1) +  # Vertical line at zero
scale_shape_manual(values = c(21, 19), labels = c("Negative", "Positive")) +  # Hollow circle vs solid circle
scale_fill_manual(values = c("white", "gray30"), labels = c("Negative", "Positive")) +  # White fill vs gray fill
labs(
title = "Distribution of (Prison) Synthetic Control Weights by State",
x = "Weight",
y = "State (ordered by absolute weight)"
) +
theme_minimal() +
theme(
legend.position = "bottom",
panel.grid.major = element_line(color = "gray90", size = 0.5),
panel.grid.minor = element_line(color = "gray95", size = 0.25)
) +
guides(
shape = guide_legend(title = "Weight Sign", override.aes = list(size = 4)),
fill = guide_legend(title = "Weight Sign", override.aes = list(size = 4))
)
# Plot the weights distribution
ggplot(weights, aes(x = weight, y = state)) +
geom_point(aes(shape = weight > 0, fill = weight > 0), size = 3, stroke = 1.5) +  # Different shapes and fills
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40", size = 1) +  # Vertical line at zero
scale_shape_manual(values = c(21, 19), labels = c("Negative", "Positive")) +  # Hollow circle vs solid circle
scale_fill_manual(values = c("white", "gray30"), labels = c("Negative", "Positive")) +  # White fill vs gray fill
labs(
title = "Distribution of (Prison) Synthetic Control Weights by State",
x = "Weight",
y = "State (ordered by absolute weight)"
) +
theme_minimal() +
theme(
legend.position = "bottom",
panel.grid.major = element_line(color = "gray90", size = 0.5),
panel.grid.minor = element_line(color = "gray95", size = 0.25),
aspect.ratio = 0.6,  # Better aspect ratio like the smoking plot
plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm")  # Consistent margins
) +
guides(
shape = guide_legend(title = "Weight Sign", override.aes = list(size = 4)),
fill = guide_legend(title = "Weight Sign", override.aes = list(size = 4))
)
# Save the plot
ggsave("/Users/scunning/Library/CloudStorage/Dropbox-MixtapeConsulting/scott cunningham/0. Yale_Mixtape/graphics/prison_augsynthweights.png",
width = 10, height = 6, dpi = 300, bg = "white")
